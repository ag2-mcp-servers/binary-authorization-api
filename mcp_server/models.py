# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:03:23+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class EnforcementMode(Enum):
    ENFORCEMENT_MODE_UNSPECIFIED = 'ENFORCEMENT_MODE_UNSPECIFIED'
    ENFORCED_BLOCK_AND_AUDIT_LOG = 'ENFORCED_BLOCK_AND_AUDIT_LOG'
    DRYRUN_AUDIT_LOG_ONLY = 'DRYRUN_AUDIT_LOG_ONLY'


class EvaluationMode(Enum):
    EVALUATION_MODE_UNSPECIFIED = 'EVALUATION_MODE_UNSPECIFIED'
    ALWAYS_ALLOW = 'ALWAYS_ALLOW'
    REQUIRE_ATTESTATION = 'REQUIRE_ATTESTATION'
    ALWAYS_DENY = 'ALWAYS_DENY'


class AdmissionRule(BaseModel):
    enforcementMode: Optional[EnforcementMode] = Field(
        None,
        description='Required. The action when a pod creation is denied by the admission rule.',
    )
    evaluationMode: Optional[EvaluationMode] = Field(
        None, description='Required. How this admission rule will be evaluated.'
    )
    requireAttestationsBy: Optional[List[str]] = Field(
        None,
        description='Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty.',
    )


class AdmissionWhitelistPattern(BaseModel):
    namePattern: Optional[str] = Field(
        None,
        description='An image name pattern to allowlist, in the form `registry/path/to/image`. This supports a trailing `*` as a wildcard, but this is allowed only in text after the `registry/` part. `*` wildcard does not match `/`, i.e., `gcr.io/nginx*` matches `gcr.io/nginx@latest`, but it does not match `gcr.io/nginx/image`. This also supports a trailing `**` wildcard which matches subdirectories, i.e., `gcr.io/nginx**` matches `gcr.io/nginx/image`.',
    )


class Empty(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class Jwt(BaseModel):
    compactJwt: Optional[str] = Field(
        None,
        description='The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1',
    )


class SignatureAlgorithm(Enum):
    SIGNATURE_ALGORITHM_UNSPECIFIED = 'SIGNATURE_ALGORITHM_UNSPECIFIED'
    RSA_PSS_2048_SHA256 = 'RSA_PSS_2048_SHA256'
    RSA_SIGN_PSS_2048_SHA256 = 'RSA_SIGN_PSS_2048_SHA256'
    RSA_PSS_3072_SHA256 = 'RSA_PSS_3072_SHA256'
    RSA_SIGN_PSS_3072_SHA256 = 'RSA_SIGN_PSS_3072_SHA256'
    RSA_PSS_4096_SHA256 = 'RSA_PSS_4096_SHA256'
    RSA_SIGN_PSS_4096_SHA256 = 'RSA_SIGN_PSS_4096_SHA256'
    RSA_PSS_4096_SHA512 = 'RSA_PSS_4096_SHA512'
    RSA_SIGN_PSS_4096_SHA512 = 'RSA_SIGN_PSS_4096_SHA512'
    RSA_SIGN_PKCS1_2048_SHA256 = 'RSA_SIGN_PKCS1_2048_SHA256'
    RSA_SIGN_PKCS1_3072_SHA256 = 'RSA_SIGN_PKCS1_3072_SHA256'
    RSA_SIGN_PKCS1_4096_SHA256 = 'RSA_SIGN_PKCS1_4096_SHA256'
    RSA_SIGN_PKCS1_4096_SHA512 = 'RSA_SIGN_PKCS1_4096_SHA512'
    ECDSA_P256_SHA256 = 'ECDSA_P256_SHA256'
    EC_SIGN_P256_SHA256 = 'EC_SIGN_P256_SHA256'
    ECDSA_P384_SHA384 = 'ECDSA_P384_SHA384'
    EC_SIGN_P384_SHA384 = 'EC_SIGN_P384_SHA384'
    ECDSA_P521_SHA512 = 'ECDSA_P521_SHA512'
    EC_SIGN_P521_SHA512 = 'EC_SIGN_P521_SHA512'


class PkixPublicKey(BaseModel):
    publicKeyPem: Optional[str] = Field(
        None,
        description='A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13',
    )
    signatureAlgorithm: Optional[SignatureAlgorithm] = Field(
        None,
        description='The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).',
    )


class GlobalPolicyEvaluationMode(Enum):
    GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED = (
        'GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED'
    )
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class Policy(BaseModel):
    admissionWhitelistPatterns: Optional[List[AdmissionWhitelistPattern]] = Field(
        None,
        description='Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies.',
    )
    clusterAdmissionRules: Optional[Dict[str, AdmissionRule]] = Field(
        None,
        description='Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.',
    )
    defaultAdmissionRule: Optional[AdmissionRule] = Field(
        None,
        description='Required. Default admission rule for a cluster without a per-cluster, per- kubernetes-service-account, or per-istio-service-identity admission rule.',
    )
    description: Optional[str] = Field(
        None, description='Optional. A descriptive comment.'
    )
    etag: Optional[str] = Field(
        None,
        description='Optional. A checksum, returned by the server, that can be sent on update requests to ensure the policy has an up-to-date value before attempting to update it. See https://google.aip.dev/154.',
    )
    globalPolicyEvaluationMode: Optional[GlobalPolicyEvaluationMode] = Field(
        None,
        description='Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.',
    )
    istioServiceIdentityAdmissionRules: Optional[Dict[str, AdmissionRule]] = Field(
        None,
        description='Optional. Per-istio-service-identity admission rules. Istio service identity spec format: `spiffe:///ns//sa/` or `/ns//sa/` e.g. `spiffe://example.com/ns/test-ns/sa/default`',
    )
    kubernetesNamespaceAdmissionRules: Optional[Dict[str, AdmissionRule]] = Field(
        None,
        description='Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: `[a-z.-]+`, e.g. `some-namespace`',
    )
    kubernetesServiceAccountAdmissionRules: Optional[Dict[str, AdmissionRule]] = Field(
        None,
        description='Optional. Per-kubernetes-service-account admission rules. Service account spec format: `namespace:serviceaccount`. e.g. `test-ns:default`',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Time when the policy was last updated.'
    )


class Signature(BaseModel):
    publicKeyId: Optional[str] = Field(
        None,
        description='The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"',
    )
    signature: Optional[str] = Field(
        None,
        description='The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.',
    )


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class Result(Enum):
    RESULT_UNSPECIFIED = 'RESULT_UNSPECIFIED'
    VERIFIED = 'VERIFIED'
    ATTESTATION_NOT_VERIFIABLE = 'ATTESTATION_NOT_VERIFIABLE'


class ValidateAttestationOccurrenceResponse(BaseModel):
    denialReason: Optional[str] = Field(
        None,
        description="The reason for denial if the Attestation couldn't be validated.",
    )
    result: Optional[Result] = Field(
        None, description='The result of the Attestation validation.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AttestationOccurrence(BaseModel):
    jwts: Optional[List[Jwt]] = Field(
        None,
        description='One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.',
    )
    serializedPayload: Optional[str] = Field(
        None,
        description='Required. The serialized payload that is verified by one or more `signatures`.',
    )
    signatures: Optional[List[Signature]] = Field(
        None,
        description='One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.',
    )


class AttestorPublicKey(BaseModel):
    asciiArmoredPgpPublicKey: Optional[str] = Field(
        None,
        description='ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.',
    )
    comment: Optional[str] = Field(
        None, description='Optional. A descriptive comment. This field may be updated.'
    )
    id: Optional[str] = Field(
        None,
        description='The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.',
    )
    pkixPublicKey: Optional[PkixPublicKey] = Field(
        None,
        description='A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class IamPolicy(BaseModel):
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[IamPolicy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )


class UserOwnedDrydockNote(BaseModel):
    delegationServiceAccountEmail: Optional[str] = Field(
        None,
        description='Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.',
    )
    noteReference: Optional[str] = Field(
        None,
        description='Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note, created by the user, in the format: `projects/*/notes/*` (or the legacy `providers/*/notes/*`). This field may not be updated. An attestation by this attestor is stored as a Drydock ATTESTATION_AUTHORITY Occurrence that names a container image and that links to this Note. Drydock is an external dependency.',
    )
    publicKeys: Optional[List[AttestorPublicKey]] = Field(
        None,
        description='Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.',
    )


class ValidateAttestationOccurrenceRequest(BaseModel):
    attestation: Optional[AttestationOccurrence] = Field(
        None,
        description='Required. An AttestationOccurrence to be checked that it can be verified by the Attestor. It does not have to be an existing entity in Container Analysis. It must otherwise be a valid AttestationOccurrence.',
    )
    occurrenceNote: Optional[str] = Field(
        None,
        description='Required. The resource name of the Note to which the containing Occurrence is associated.',
    )
    occurrenceResourceUri: Optional[str] = Field(
        None,
        description='Required. The URI of the artifact (e.g. container image) that is the subject of the containing Occurrence.',
    )


class Attestor(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs.',
    )
    etag: Optional[str] = Field(
        None,
        description='Optional. A checksum, returned by the server, that can be sent on update requests to ensure the attestor has an up-to-date value before attempting to update it. See https://google.aip.dev/154.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. The resource name, in the format: `projects/*/attestors/*`. This field may not be updated.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Time when the attestor was last updated.'
    )
    userOwnedDrydockNote: Optional[UserOwnedDrydockNote] = Field(
        None, description='A Drydock ATTESTATION_AUTHORITY Note, created by the user.'
    )


class ListAttestorsResponse(BaseModel):
    attestors: Optional[List[Attestor]] = Field(
        None, description='The list of attestors.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. Pass this value in the ListAttestorsRequest.page_token field in the subsequent call to the `ListAttestors` method to retrieve the next page of results.',
    )
